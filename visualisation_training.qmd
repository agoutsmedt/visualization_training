---
title: "How to Make Great Data Visualisations"
message: false
warning: false
---

```{r}
library(tidyverse)
library(knitr)
if (str_detect(getwd(), "agoutsmedt")) {
  data_path <- "/home/agoutsmedt/Nextcloud/Research/data"
} else {
  data_path <- "/Users/thomaslaloux/Downloads/"
}
data_ispole <- read.csv2(file.path(data_path, "data_ispole.csv"), sep = ";") %>%
  janitor::clean_names() %>%
  mutate(
    n_titre = nchar(titre),
    peer_review = ifelse(peer_review == "peer-reviewed", "Peer-reviewed", "Non peer-reviewed")
  )
```

## What makes a great data visualisation?

::: {.fragment .center-content}
### One thing's for sure: it's never a pie chart...

![](/pictures/pie_chart_meme.png){width="60%"}
:::

:::{.notes}
Title rather explicit at first sights: helping you to make better visualisations. Giving you some general principles, but no "absolute" principles. Highly dependent on context (context = data + results + audience). 

But let's start by at least one general principle
:::

## What's the plan for today?

:::{.highlight-last}
- General considerations
  - Not a list of rules to apply, but a series of issues to think about when producing visualisations
- Practical data visualisation
  - Using ggplot2 in R
  - Putting the reflections of the first part in context
:::

:::{.notes}
- Short session: no time to dig to much into R, but we want to show you what we think is one of the best tool to make visualizations. (Sorry but don't use excel).
- We'll send you the slides, as well as the code that allows for running the slides.
:::

# General Considerations

## 

::: columns
::: {.column .highlight-last width="50%"}
### @healyDataVisualizationPractical2018 *Data Visualization: A Practical Introduction*. Princeton University Press.

-   General discussion on common issues regarding data visualizations
-   Applications to social sciences
-   Focus on R package `ggplot2` [@ggplot2]
:::

::: {.column .center-content width="50%"}
![](/pictures/healy_cover.png){width="90%"}
:::
:::

:::{.notes}
- Not much risk because already one great book doing what we wanted to do: discussing how to make visualisations, application to social sciences, questions to ask, and using ggplot2 to do that. (Our example in the practical part though). So the general considerations I will present you are fully inspired by Healy's first chapter. 
:::


## Why visualizing data?

::: {.columns .small-text}
::: {.column .highlight-last width="55%"}
-   Exploring your data (identifying patterns and problems, etc...)
    -   Extract information intuitively, efficiently, and accurately

::: {.fragment .center-content}
![](/pictures/ascombe_scatterplot.png){width="53%"}
:::
:::

::: {.column .highlight-last width="45%"}
-   **Revealing relationships** in your data
-   **Communicating information** with precision, in a concise way
-   Highlighting your **main findings**
-   A more sociological dimension: bolstering **credibility**
-   ... **but, it is not sufficient to "look at data" for sound analysis---and it comes with some risks**
:::
:::

:::{.notes}
- First question, why visualizing data? Because you can identify many things that you can't see by looking at a tables with many rows and columns. Important point: visualisation is not only for displaying your final results, it's part of the research process, of exploring data and discovering patterns. Essential first step also to find problems in your data (Thomas will show you an example later): missing data, errors in some cells, etc...
- Figure: same correlation between the points. Running a linear regression on your observation will give you more or less the same results. But by simply looking at the different scatterplot, you can see how different your data are. Second: non-linear pattern. Third and fourth, outliers influencing a lot your correlation.
- Credibility: means you can cheat your audience/reader with nice visualization. So in a way kind of responsibility. So visualizations also comes with risks, and we can imagine there is an ethics of graphics.
- Outside of cheating your audience, you can also cheat yourself. Visualizing data should be a reflexive and cautious approach to avoid displaying data in a "wrong" way.
:::

## Edward Tufte's main principle

::: columns
::: {.column .fragment .highlight-last .tiny-text width="45%"}
> Graphical excellence is the well-designed presentation of interesting data—a matter of substance, of statistics, and of design. ... \[It\] consists of complex ideas communicated with clarity, precision, and efficiency. ... \[It\] is that which gives to the viewer the greatest number of ideas in the shortest time with the **least ink in the smallest space**. ... \[It\] is nearly always multivariate. ... And graphical excellence requires telling the truth about the data. [@tufteVisual1983, 53]
:::

::: {.column .fragment .center-content width="55%"}
![](/pictures/napoleon_campaign.png){.lightbox width="96%"} ![](/pictures/monstruous_costs.png){.lightbox width="48%"} ![](/pictures/tufte_boxplots.png){.lightbox width="48%"}
:::
:::

:::{.notes}
- One important character in reflexions about visualizations: Edward Tufte. political scientist working notably on civil rights in the 1960s, specialized in data visualization, notably because teaching political sciences and visualizations to journalists at Yale.
- One major principale of Tufte: data to ink ratio. Being to display rich data, but in a very simple graph. Avoid unnecessary details, redundancy in info, etc... A great principle, but not always to be taken absolutely. (See Tufte's examples of great visualizations)
- Beyond "data to ink ratio":
  - in a way memorable and saying something interesting
  - depends of your audience ! (also some types of visualizations asked for more pedagogy than others)
  - honesty about the data (don't cheat yourself with data)
- One of the difficulty: it's a mix of rigorous presentation of data mixed with aesthetics. It's also an issue of debating with your fellows, often helpful to see how they understand your visualizations, what you can improve, etc...
:::

## Three hurdles to great data visualisation

:::{.highlight-last}
- **Bad taste**: unappealing aestethics and bad design
- **Bad data**: misuse of data, errors or missing values, etc.
- **Perception issues**: how people perceive and process what they are looking at differs depending on cognitive and contextual factors
:::

:::{.notes}
For convenience, we can say that our problems tend to come in three varieties. Some are strictly aesthetic. The graph we are looking at is in some way tacky, tasteless, or a hodgepodge of ugly or inconsistent design choices. Some are substantive. Here, our graph has problems that are due to the data being presented. Good taste might make things look better, but what we really need is to make better use of the data we have, or get new information and plot that instead. And some problems are perceptual. In these cases, even with good aesthetic qualities and good data, the graph will be confusing or misleading because of how people perceive and process what they are looking at. It is important to understand that these elements, while often found together, are distinct from one another.
:::

## Bad taste

:::{.columns .fragment}

:::{.column .center-content width="50%"}
![](pictures/bad_taste_graph.png)
:::

:::{.column .highlight-last width="50%"}
- Why it's bad?
  - Duplicated information
  - Unnecessary complexity and design features
  - Difficulty to extract the information correctly
:::
:::

:::{.notes}
- Why it's bad ??
:::

## Bad data (use)

:::{.columns .fragment}

:::{.column .center-content width="60%"}
![](pictures/world_values_wrong.png){width="69%" .lightbox}
![](pictures/world_values_clearer.png){width="69%" .lightbox}
:::

:::{.column .highlight-last width="40%"}
- Why it's bad?
  - cherry-picking of data
  - Misleading the audience
- Multiply types of visualizations, vary scales, etc., to avoid cheating yourself
:::
:::

:::{.notes}
- Well-designed figures with little or no junk in their component parts are not by themselves a defense against cherry-picking your data or presenting information in a misleading way. Indeed, it is even possible that, in a world where people are on guard against junky infographics, the “halo effect” accompanying a wellproduced figure might make it easier to mislead some audiences. Or, perhaps more common, good aesthetics does not make it much harder for you to mislead yourself as you look at your data.
- scholars who knew the World Values Survey data underlying the graph noticed something else. The graph reads as though people were asked to say whether they thought it was essential to live in a democracy, and the results plotted show the percentage of respondents who said “Yes,” presumably in contrast to those who said “No.” But in fact the survey question asked respondents to rate the importance of living in a democracy on a ten-point scale, with 1 being “Not at all Important” and 10 being “Absolutely Important.”
:::

## Perception issues: some examples

:::{.center-content}
![](pictures/excel_3d.png){width="55%" .lightbox}
![](pictures/curve_converging.png){width="55%" .lightbox}
:::

:::{.notes}
- Perception may be very tricky, leading you to see some patterns that does not really exist in the data
  - Also, creates the attempt to make your point stronger by manipulating the scales, what you have to resist.
- Series of visual tasks to do (mechanically) to extract the information. We need to "decode" the information. Important to keep in mind where the audience may have some decoding problems.
:::

## Perception issues: colors

:::{.columns}
:::{.column .fragment .center-content width="33%"}
![](pictures/herman_grid.png){width="90%"}
:::
:::{.column .highlight-last .tiny-text width="33%"}
- **Hue**: What color is it?
  - Red, blue, green, yellow, etc.
- **Chroma** (or Saturation): How pure or intense is the color?
  - washed-out or grayish vs. vivid or rich
- **Luminance** (or Lightness/Brightness): How light or dark is the color?
  - close to white vs. close to black
:::

:::{.column .fragment .center-content width="33%"}
![](pictures/palettes.png){width="90%"}
:::
:::

:::{.notes}
- Colors are tricky. Our perception of colors may be different (you have different types of color-blindness or color vision deficiency). But more generally, our perception of colors may be altered by the vincinity of colors, shadow, etc... Just an example here. 
- Five palettes generated from R’s color space library. From top to bottom, the sequential grayscale palette varies only in luminance, or brightness. The sequential blue palette varies in both luminance and chrominance (or intensity). The third sequential palette varies in luminance, chrominance, and hue. The fourth palette is diverging, with a neutral midpoint. The fifth features balanced hues, suitable for unordered categories.
- The upshot is that we should generally not pick colors in an ad hoc way. It is too easy to go astray. In addition to the considerations we have been discussing, we also want to avoid producing plots that confuse people who are color-blind, for example. Fortunately, almost all the work has been done for us already. Different color spaces have been defined and standardized in ways that account for these uneven or nonlinear aspects of human color perception
- Choose appropriate palettes for what you want (types of palette like gradient, diverging, etc... means something). Taking care of different color-blindness.
:::

## Perception issues: shapes and scales

:::{.columns}
:::{.column .center-content width="50%"}
```{r}
#| fig.height: 7
#| fig.width: 8
# Sample data
library(patchwork)
data <- data.frame(
  category = c("A", "B", "C", "D"),
  value = c(30,33, 35, 32)
)

# Pie chart (using coord_polar)
pie_plot <- ggplot(data, aes(x = "", y = value, fill = category)) +
  geom_bar(stat = "identity", width = 1, show.legend = F) +
  coord_polar("y") +
  theme_void(base_size = 20) +
  scale_fill_viridis_d() +
  geom_label(aes(label = category), position = position_stack(vjust = 0.5), show.legend = F) +
  labs(title = "Pie Chart: Harder to distinguish differences")

# Display both plots (e.g., in RMarkdown or with patchwork)
 pie_plot
```
:::
:::{.column .fragment .center-content width="50%"}
```{r}
#| fig.height: 7
#| fig.width: 8
# Bar chart
bar_plot <- ggplot(data, aes(x = category, y = value, fill = category)) +
  geom_bar(stat = "identity",show.legend = F) +
  scale_fill_viridis_d() +
  theme_minimal(base_size = 20) +
  labs(title = "Bar Chart: Differences are clear",
       y=NULL,
       x = NULL)
bar_plot
```

:::
:::

## Perception issues: shapes and scales

:::{.center-content}
![](pictures/comparing_size.png){width="55%" .lightbox}

:::{.fragment}
![](pictures/comparing_size_errors.png){width="62%" .lightbox}
:::
:::

:::{.notes}
- What percentage the smaller one is of the large one. 
:::

# Practical Data Visualisation with ggplot2

## What is ggplot2 ?

:::{.highlight-last .small-text}
- **ggplot2** is a data visualization package for R developed by Hadley @ggplot2.
- It lets you build complex plots from simple building blocks.
- Inspired by the Grammar of Graphics [@wilkinson2011grammar] — a system for describing and thinking about graphics.
  - *A consistent syntax for building complex graphics by combining simple components*
  - *Shifts the focus from choosing predefined chart types to systematically defining what to show and how to show it*.

:::

## Why should you use ggplot2?

:::{.highlight-last}
- Powerful and flexible
- Grammar of Graphics: 
  - Stems from a coherent logics of visualization, which helps to develop reflexivity
  - Customize almost every visual aspect
- Intuitive syntax once you understand the grammar
- Active community, extensive documentation, updates, and extension (packages)
- Integrated with R and the tidyverse suite
:::


## ggplot2 examples

::: {.panel-tabset .tiny-text .center-content}

#### Career paths

![](pictures/boe.png){width=65%}

#### Topics characteristics

![](pictures/Communities_europeanisation_colored_odds.png){width=65%}

#### Legislation timeline

![](pictures/chronology_events.png){width=65%}

#### Number of articles

![](pictures/Articles on mini public.jpeg){width=65%}

:::


## How ggplot2 Works

:::{.highlight-last .small-text}
- **Plots as a combination of different layers**
  - ggplot2 builds plots by **layers**, each layer adds a different component to the plot
  - The concept behind ggplot2 divides plot into three different fundamental parts: Plot = Data + Variable + Geometric Object.
  - Then you customize plot details (the theme) with elements e.g., the scales, grid, labels, and legends using specific functions
- $\Rightarrow$ **Plots are built incrementally by adding components piece by piece** 
:::

:::{.notes}
Coherent logics: push you to ask yourself the good questions : which geom will I use ? With wich data?
It is useful to think about the purpose of each layer before it is added. In general, there are three purposes for a layer:

To display the data. We plot the raw data for many reasons, relying on our skills at pattern detection to spot gross structure, local structure, and outliers. This layer appears on virtually every graphic. In the earliest stages of data exploration, it is often the only layer.

To display a statistical summary of the data. As we develop and explore models of the data, it is useful to display model predictions in the context of the data. Showing the data helps us improve the model, and showing the model helps reveal subtleties of the data that we might otherwise miss. Summaries are usually drawn on top of the data.

To add additional metadata: context, annotations, and references. A metadata layer displays background context, annotations that help to give meaning to the raw data, or fixed references that aid comparisons across panels. Metadata can be useful in the background and foreground.

:::

## How ggplot2 Works: Three main Components

:::{.highlight-last .small-text}
- ***Data***: The dataset used to generate the plot  
- ***Mapping*** (*aesthetics*): Specifies which variables from the dataset are mapped to visual properties like position, color, or size
- ***Geom***: Refers to the geometric objects (e.g., points, lines, bars) that represent data on the plot
  $\Rightarrow$ This defines the type of plot you want to create.  
  *You can combine multiple geoms — for example, points with a regression line*  
- ***Then*** the details can be refined!

:::

:::{.notes}
We first give the data frame (it only works on data frame),
then the aesthetics which is the role of the variables : x, y, sample, colour, group, etc.,
a geometry which is the type of representation : points, lines, box plots, histograms, etc.,
modification of the default axes,
changes in the default legend,
theme,
:::

## Presenting the dataset : ISPOLE publications in DIAL {.smaller}

:::{.tiny-text .center-content}
```{r}
#| echo: false
#| output: true
# kable(head(data_ispole))
glimpse(data_ispole, width = 250)
``` 
:::
::: {.notes}
:::


## Example Plot: Number of Publications by Year

::: {.fragment .highlight-last}

**Start with the data and the mapping:**

:::

::: {.fragment .center-content}

```{r}
#| echo: true
#| fig-height: 3.5
#| output-location: fragment
#| fig-width: 10

ggplot(data = data_ispole, aes(x = annee))
``` 

:::

## Example Plot: Number of Publications by Year

::: {.fragment .highlight-last}

**Identify the Issue : Bad Encoding?**

:::

::: {.fragment .tiny-text}

```{r}
#| echo: false
#| message: false
#| warning: false

data_ispole %>%
  mutate(n_lettre = nchar(annee)) %>%
  select(annee, n_lettre) %>%
  filter(n_lettre > 4) %>%
  select(annee) %>%
  knitr::kable() %>%
  kableExtra::kable_styling(font_size = 11)
``` 

:::

## Example Plot: Number of Publications by Year

::: {.fragment}

**(re)Start with the data and the mapping:**

:::

::: {.fragment .center-content}

```{r}
#| echo: true
#| message: false
#| warning: false
#| output-location: fragment
#| fig-height: 3.5
#| fig-width: 10

data_ispole %>%
  mutate(annee = as.numeric(annee)) %>%
  ggplot(aes(x = annee))
``` 

:::

## Example Plot: Number of Publications by Year

::: {.fragment .highlight-last}

**Now add the geom**

:::

::: {.fragment .center-content}

```{r}
#| echo: true
#| message: false
#| warning: false
#| output-location: fragment
#| fig-height: 3.5
#| fig-width: 10

data_ispole %>%
  mutate(annee = as.numeric(x = annee)) %>%
  ggplot(data = ., aes(x = annee)) +
  geom_bar()
``` 

:::

## Example Plot: Number of Publications by Year

::: {.fragment}

**Choose another geom**

:::

::: {.fragment .center-content}

```{r}
#| echo: true
#| message: false
#| warning: false
#| output-location: fragment
#| fig-height: 3.5
#| fig-width: 10

data_ispole %>%
  mutate(annee = as.numeric(annee)) %>%
  ggplot(aes(x = annee)) +
  geom_boxplot()
``` 

:::

## Example Plot: Number of Publications by Year

::: {.fragment}

**Now add another mapping**

:::

::: {.fragment .center-content}


```{r}
#| echo: true
#| message: false
#| warning: false
#| fig-height: 3.5
#| fig-width: 10
#| output-location: fragment



data_ispole %>%
  mutate(annee = as.numeric(annee)) %>%
  ggplot(data = ., aes(x = annee, fill = peer_review)) +
  geom_bar()
``` 

:::

## Example Plot: Number of Publications by Year

::: {.fragment}

**Now add the details**

- First, install some useful extensions to ggplot2
:::
::: {.fragment .center-content}
```{r}
#| echo: true
#| message: false
#| warning: false
#| output-location: fragment
library(ggpubr) # additional themes
library(hrbrthemes) # additional themes
library(ggsci) # additional color palettes
library(see) # additional color palettes
library(gghighlight) # highlighting features

data_ispole <- data_ispole %>% 
  mutate(annee = as.numeric(annee))
``` 

:::

## Example Plot: Number of Publications by Year


**Now add the details**

::: {.fragment}

```{r}
#| echo: true
#| message: false
#| warning: false
#| eval: false

data_ispole %>%
  ggplot(data = ., aes(x = annee)) +
  geom_bar(fill = "darkseagreen", color = "black") +
  scale_x_continuous(breaks = c(2010, 2024)) +
  theme(panel.grid.major.y = element_line(color = "black", linetype = "dashed"),
        panel.grid.minor.y = element_line(color = "red", linetype = "dotted"))
``` 

::: 

::: {.fragment .center-content}

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 3.5
#| fig-width: 10

ggplot(data = data_ispole, aes(x = annee)) +
  geom_bar(fill = "darkseagreen", color = "black") +
  scale_x_continuous(breaks = c(2010, 2024)) +
  theme(
    panel.grid.major.y = element_line(color = "black", linetype = "dashed"),
    panel.grid.minor.y = element_line(color = "red", linetype = "dotted")
  )
``` 

:::

## Example Plot: Number of Publications by Year


**Now add the details**

::: {.fragment .center-content}

```{r}
#| echo: true
#| output-location: fragment
#| fig-height: 3.5
#| fig-width: 10


ggplot(data = data_ispole, aes(x = annee)) +
  geom_bar(fill = "darkseagreen", color = "black") +
  theme_pubclean() +
  theme(plot.title = element_text(size = 20, hjust = 0.5)) +
  labs(x = NULL, y = NULL, title = "Evolution of ISPOLE's Publication Activity Over Time")
``` 

:::



## Title Length Across Publication Types

:::{.fragment .nonincremental .highlight-last}
- What would be a good way to visualize this?

::: {.very-small-text}
```{r}
#| echo: false
#| message: false
#| warning: false
#| output: true
#| fig-height: 3.5
#| fig-width: 8
data_ispole %>%
  select(type_de_publication, n_titre) %>%
  mutate(type_de_publication = factor(type_de_publication)) %>%
  summary() %>% 
  kable()
``` 

:::
:::

::: {.notes}
:::

## Title Length Across Publication Types

::: {.fragment .center-content}
```{r}
#| echo: true
#| message: false
#| warning: false
#| output: true
#| output-location: fragment
#| fig-height: 3.5
#| fig-width: 10

ggplot(data = data_ispole, aes(x = type_de_publication, y = n_titre))
``` 

:::


## Visualizing Title Length Across Publication Types


```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false
#|
types_to_keep <- c(
  "Monographie (Book)",
  "Contribution à ouvrage collectif (Book Chapter)",
  "Article de périodique (Journal article)",
  "Thèse (Dissertation)",
  "Communication à un colloque (Conference Paper)",
  "Document de travail (Working Paper)"
)

data_ispole <- data_ispole %>%
  filter(type_de_publication %in% types_to_keep)
```

::: {.fragment .highlight-last .small-text}
- Visualize the data through a boxplot

::: {.fragment .center-content}
```{r}
#| echo: true
#| output: true
#| fig-height: 3
#| fig-width: 8
ggplot(data = data_ispole, aes(x = type_de_publication, y = n_titre)) +
  geom_boxplot() +
  theme_pubclean()
``` 
:::

- How could we improve this plot?
:::

## Visualizing Title Length Across Publication Types

::: {.panel-tabset .small-text .center-content}

### New Visualisation

 
::: {.fragment}

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: true
#| fig-height: 5
#| fig-width: 12

data_ispole %>%
  filter(
    type_de_publication == "Monographie (Book)" |
      type_de_publication == "Contribution à ouvrage collectif (Book Chapter)" |
      type_de_publication == "Article de périodique (Journal article)" |
      type_de_publication == "Thèse (Dissertation)" |
      type_de_publication == "Communication à un colloque (Conference Paper)" |
      type_de_publication == "Document de travail (Working Paper)"
  ) -> data_ispole2

plot <- data_ispole2 %>%
  mutate(
    type_de_publication_fr = str_replace(type_de_publication, " \\s*\\([^\\)]+\\)", ""),
    type_de_publication_en = gsub("(?<=\\()[^()]*(?=\\))(*SKIP)(*F)|.", "", type_de_publication, perl = T)
  ) %>%
  ggplot(aes(x = reorder(type_de_publication_en, n_titre), y = n_titre, fill = reorder(type_de_publication_en, n_titre))) +
  geom_boxplot(show.legend = F) +
  theme_pubclean(base_family = "Century Gothic") +
  coord_flip() +
  scale_y_continuous(name = "Number of Words in Titles", expand = c(0, 0)) +
  theme(
    axis.title.y = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.major.x = element_line(color = "grey", linetype = "dotted"),
    plot.title.position = "plot", # Align relative to full plot area
    plot.title = element_text(hjust = 0)
  ) +
  scale_fill_oi() +
  ggtitle("Number of words in the title according to the type of Publication")
plot
```

::: 

### Code

```{r}
#| echo: true
#| message: false
#| warning: false
#| output: false
#| fig-height: 5
#| fig-width: 12

plot <- data_ispole2 %>%
  mutate(
    type_de_publication_fr = str_replace(type_de_publication, " \\s*\\([^\\)]+\\)", ""),
    type_de_publication_en = gsub("(?<=\\()[^()]*(?=\\))(*SKIP)(*F)|.", "", type_de_publication, perl = T)
  ) %>%
  ggplot(aes(x = reorder(type_de_publication_en, n_titre), y = n_titre, fill = reorder(type_de_publication_en, n_titre))) +
  geom_boxplot(show.legend = F) +
  theme_pubclean(base_family = "Century Gothic") +
  coord_flip() +
  scale_y_continuous(name = "Number of Words in Titles", expand = c(0, 0)) +
  theme(
    axis.title.y = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.major.x = element_line(color = "grey", linetype = "dotted"),
    plot.title.position = "plot", # Align relative to full plot area
    plot.title = element_text(hjust = 0)
  ) +
  scale_fill_oi() +
  ggtitle("Number of words in the title according to the type of Publication")
plot
```

:::

## Visualizing Title Length Across Publication Types

:::{.fragment .nonincremental .highlight-last}
- Spot the modifications!

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: true
#| fig-height: 5
#| fig-width: 12


library(patchwork)
data_ispole2 %>%
  ggplot(aes(x = type_de_publication, y = n_titre)) +
  geom_boxplot() +
  theme_pubclean() -> plot2

plot + plot2
```
:::

## Visualizing Title Length Across Publication Types

::: {.highlight-last}

- Add faceting by another variable (and another geom)

:::

::: {.fragment}
```{r}
#| echo: false
#| message: false
#| warning: false
#| output: true
#| fig-height: 5
#| fig-width: 12

plot + geom_jitter(show.legend = F, alpha = 0.5, shape = 21, size = 0.2) +
  facet_wrap(. ~ peer_review) +
  theme_ipsum(base_family = "Century Gothic") +
  theme(
    axis.title.y = element_blank(),
    plot.title.position = "plot", # Align relative to full plot area
    plot.title = element_text(hjust = 0)
  )
```
::: 

## Visualizing Title Length Across Publication Types


- Add faceting by another variable (and another geom)


::: {.fragment}


```{r}
#| echo: true
#| output: false
#| fig-height: 5
#| fig-width: 12

plot +
  geom_jitter(show.legend = F, alpha = 0.5, shape = 21, size = 0.2) +
  facet_wrap(. ~ peer_review) +
  theme_ipsum(base_family = "Century Gothic") +
  theme(
    axis.title.y = element_blank(),
    plot.title.position = "plot", # Align relative to full plot area
    plot.title = element_text(hjust = 0)
  )
```

::: 


:::{.notes}
Faceting in ggplot2 means splitting your data into subsets based on the values of one (or more) variables, and then making the same type of plot for each subset, displayed side by side (or in a grid).

It's like saying: “Show me the same plot, but separately for each group.”

Faceting = one chart per group.
::: 

## General Rule

::: {.fragment}

- (Almost) always use faceting when showing differences across a variable

::: 

::: {.fragment}

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 12

data_ispole2 %>%
  mutate(
    type_de_publication_en = gsub("(?<=\\()[^()]*(?=\\))(*SKIP)(*F)|.", "", type_de_publication, perl = T)
  ) %>%
  group_by(annee, type_de_publication_en) %>%
  summarize(n = n(), .groups = "drop") %>%
  complete(
    type_de_publication_en,
    annee = seq(min(annee), max(annee)),
    fill = list(n = 0)
  ) %>%
  ungroup() %>%
  arrange(annee) %>%
  group_by(type_de_publication_en) %>%
  mutate(t = cumsum(n)) %>%
  ggplot(aes(x = annee, y = n, fill = type_de_publication_en)) +
  geom_col(
    size = 1.2 # ,fill="grey"
  )
```

::: 

## General Rule

::: {.fragment}

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 12

data_ispole2 %>%
  mutate(
    type_de_publication_en = gsub("(?<=\\()[^()]*(?=\\))(*SKIP)(*F)|.", "", type_de_publication, perl = TRUE)
  ) %>%
  group_by(annee, type_de_publication_en) %>%
  summarize(n = n(), .groups = "drop") %>%
  complete(
    type_de_publication_en,
    annee = seq(min(annee), max(annee)),
    fill = list(n = 0)
  ) %>%
  ungroup() %>%
  arrange(annee) %>%
  group_by(type_de_publication_en) %>%
  ggplot(aes(x = annee, y = n, fill = type_de_publication_en)) +
  geom_col(
    alpha = 0.75,
    show.legend = FALSE,
    width = 0.75,
    color = "black" # only external borders
  ) +
  xlim(2010, 2024) +
  gghighlight(
    use_direct_label = FALSE,
    label_params = list(),
    unhighlighted_params = list(
      fill = "lightgrey",
      alpha = 0.6
    )
  ) +
  scale_y_continuous(name = "Total number of publication", limits = c(0, 250)) +
  theme_ipsum(base_family = "Century Gothic") +
  theme(axis.title.x = element_blank()) +
  facet_wrap(. ~ fct_reorder(type_de_publication_en, n, .desc = TRUE)) +
  scale_fill_jco()
```

:::

:::{.notes}
Why use faceting?
It helps compare patterns across groups without cluttering a single plot.

You preserve the same axes and scales, making differences and similarities easier to spot.

It's especially useful when color or shape isn't enough to distinguish groups.
:::

## Exercice

**On Paper (No Computers)**

:::{.highlight-last}
- How would you visualize the relationship between the number of conference papers and the number of published outputs (books, journal articles, and book chapters)?

- How would you compare peer-reviewed and non–peer-reviewed publications in this context?

- In both cases, how would you structure your `ggplot2` code accordingly?
:::

```{r}
#| echo: false
data_ispole %>%
  mutate(
    book = ifelse(type_de_publication == "Monographie (Book)", 1, 0),
    chapter = ifelse(type_de_publication == "Contribution à ouvrage collectif (Book Chapter)", 1, 0),
    article = ifelse(type_de_publication == "Article de périodique (Journal article)", 1, 0),
    conference_paper = ifelse(type_de_publication == "Communication à un colloque (Conference Paper)", 1, 0)
    # type_de_publication== "Document de travail (Working Paper)"
  ) %>%
  mutate(auteur_s = str_trim(auteur_s)) %>%
  tidyr::separate_rows(auteur_s, sep = ";") %>%
  mutate(auteur_s = trimws(auteur_s)) %>%
  group_by(auteur_s) %>%
  summarise(
    book = sum(book),
    chapter = sum(chapter),
    article = sum(article),
    conference_paper = sum(conference_paper)
  ) %>%
  ungroup() %>%
  mutate(total = rowSums(across(c(book, chapter, article, conference_paper)))) %>%
  filter(total > 0) %>%
  filter(conference_paper < 100 & book < 15) -> df
data_ispole %>%
  mutate(
    book = ifelse(type_de_publication == "Monographie (Book)", 1, 0),
    chapter = ifelse(type_de_publication == "Contribution à ouvrage collectif (Book Chapter)", 1, 0),
    article = ifelse(type_de_publication == "Article de périodique (Journal article)", 1, 0)
  ) %>%
  mutate(auteur_s = str_trim(auteur_s)) %>%
  tidyr::separate_rows(auteur_s, sep = ";") %>%
  mutate(auteur_s = trimws(auteur_s)) %>%
  group_by(auteur_s, peer_review) %>%
  summarise(
    book = sum(book),
    chapter = sum(chapter),
    article = sum(article)
  ) %>%
  ungroup() %>%
  mutate(total = rowSums(across(c(book, chapter, article)))) %>%
  filter(total > 0) %>%
  filter(book < 15) %>%
  inner_join(select(df, conference_paper, auteur_s), by = "auteur_s") -> df2
```

## Exercice

```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 12

library(patchwork)
df %>%
  ggplot(aes(x = conference_paper, y = book)) +
  geom_count(shape = 22, fill = "#ED7D31", show.legend = F, , alpha = 0.75) +
  geom_smooth(show.legend = F, linetype = "dashed", fill = "#ED7D31", color = "black", method = "lm") +
  labs(x = "Number of Conference Papers", y = NULL, , title = "Book") +
  df %>%
  ggplot(aes(x = conference_paper, y = chapter)) +
  geom_count(shape = 22, fill = "#5B9BD5", show.legend = F, alpha = 0.75) +
  geom_smooth(show.legend = F, linetype = "dashed", fill = "#5B9BD5", color = "black", method = "lm") +
  labs(x = "Number of Conference Papers", y = NULL, title = "Book Chapter") +
  df %>%
  ggplot(aes(x = conference_paper, y = article)) +
  geom_count(shape = 22, fill = "#70AD47", show.legend = F, alpha = 0.75) +
  geom_smooth(show.legend = F, linetype = "dashed", fill = "#70AD47", color = "black", method = "lm") +
  labs(x = "Number of Conference Papers", y = NULL, title = "Article") -> p

p + plot_layout(axis_titles = "collect") +
  plot_annotation(title = "Exploring the Link Between Research Outputs and Conference Paper Counts") & theme_ipsum(base_family = "Century Gothic")
```

## Exercice

```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 12

df2 %>%
  ggplot(aes(x = conference_paper, y = book, fill = peer_review, color = peer_review)) +
  geom_count(shape = 22, alpha = 0.75) +
  geom_smooth(show.legend = F, linetype = "dashed", method = "lm") +
  labs(x = "Number of Conference Papers", y = NULL, title = "Book", color = NULL, fill = NULL) +
  scale_fill_manual(values = c("#00AFBB", "#E7B800")) +
  scale_color_manual(values = c("#00AFBB", "#E7B800")) +
  guides(size = "none") +
  df2 %>%
  ggplot(aes(x = conference_paper, y = chapter, fill = peer_review, color = peer_review)) +
  geom_count(shape = 22, alpha = 0.75) +
  geom_smooth(show.legend = F, linetype = "dashed", method = "lm") +
  labs(x = "Number of Conference Papers", y = NULL, title = "Book Chapter", color = NULL, fill = NULL) +
  scale_fill_manual(values = c("#00AFBB", "#E7B800")) +
  scale_color_manual(values = c("#00AFBB", "#E7B800")) +
  guides(size = "none") +
  df2 %>%
  ggplot(aes(x = conference_paper, y = article, fill = peer_review, color = peer_review)) +
  geom_count(shape = 22, alpha = 0.75) +
  geom_smooth(show.legend = F, linetype = "dashed", method = "lm") +
  labs(x = "Number of Conference Papers", y = NULL, title = "Article", color = NULL, fill = NULL) +
  scale_fill_manual(values = c("#00AFBB", "#E7B800")) +
  scale_color_manual(values = c("#00AFBB", "#E7B800")) +
  guides(size = "none") -> p


p + plot_layout(axis_titles = "collect", guides = "collect") +
  plot_annotation(title = "Exploring the Link Between Research Outputs and Conference Paper Counts") & theme_ipsum(base_family = "Century Gothic") &
  theme(legend.position = "top", legend.name = element_blank())
```

## References
